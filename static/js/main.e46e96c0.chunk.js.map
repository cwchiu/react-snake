{"version":3,"sources":["containers/SnakeGame/components/VirtualKeyboard/Styled.js","containers/SnakeGame/constants.js","containers/SnakeGame/components/VirtualKeyboard/index.js","containers/SnakeGame/Styled.js","containers/SnakeGame/index.js","App.js","serviceWorker.js","index.js"],"names":["StyledVirtualKeyboard","styled","div","GAME_WIDTH","SNAKE_LIMITED_SPEED","SNAKE_DELTA_SPEED","SPACE","DEFAULT_SNAKE","headPosition","x","y","body","maxLength","direction","speed","DIRECTION","VirtualKeyboard","handleOnClick","data-code","className","onClick","pulse","keyframes","StyledSnakeGame","generateBlocks","width","blocks","h","rows","w","push","id","generateFood","Math","floor","random","SnakeGame","useState","score","setScore","timer","setTimer","isGameStart","setGameStart","snake","updateSnake","food","setFood","window","_v","checkBound","position","handleOnKBClick","event","code","snake_direction","after_direection","handleKeyCode","currentTarget","getAttribute","updateGameView","block","head","length","find","bodyPos","useInterval","shift","max","map","key","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e46e96c0.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledVirtualKeyboard = styled.div`\r\n    color: white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 5em;\r\n    margin-top: 10px;\r\n    .virtual-keyboard__button {\r\n        cursor: pointer;\r\n        &:hover {\r\n            color: #ffd600;\r\n        }\r\n    }\r\n    .virtual-keyboard__wrapper-bottom {\r\n        display: flex;\r\n    }\r\n`;","\r\nexport const GAME_WRAPPER_SIZE = 600;\r\nexport const GAME_WIDTH = 30;\r\n\r\nexport const SNAKE_INITIAL_SPEED = 200;\r\nexport const SNAKE_LIMITED_SPEED = 10;\r\nexport const SNAKE_DELTA_SPEED = 2;\r\n\r\nexport const ARROW_UP = 'ArrowUp';\r\nexport const ARROW_DOWN = 'ArrowDown';\r\nexport const ARROW_LEFT = 'ArrowLeft';\r\nexport const ARROW_RIGHT = 'ArrowRight';\r\nexport const SPACE = 'Space';\r\nexport const KEYCODE_MAP = {\r\n    32: SPACE,\r\n    37: ARROW_LEFT,\r\n    38: ARROW_UP,\r\n    39: ARROW_RIGHT,\r\n    40: ARROW_DOWN,\r\n}\r\nexport const BACKGROUND_COLOR = '#1e1e1e';\r\nexport const DEFAULT_SNAKE = {\r\n    headPosition: { // 蛇的頭部\r\n        x: 0,\r\n        y: 0,\r\n    },\r\n    body: [], // 記錄身體每個元素的位置\r\n    maxLength: 2, // 紀錄目前蛇的長度，超出蛇的長度的部分，會被從body陣列中拿掉。\r\n    direction: { // 紀錄目前蛇的方向\r\n        x: 1,\r\n        y: 0,\r\n    },\r\n    speed: SNAKE_INITIAL_SPEED, // 移動速度\r\n};\r\n\r\nexport const DIRECTION = {\r\n    [ARROW_UP]: { x: 0, y: -1 },\r\n    [ARROW_DOWN]: { x: 0, y: 1 },\r\n    [ARROW_LEFT]: { x: -1, y: 0 },\r\n    [ARROW_RIGHT]: { x: 1, y: 0 }\r\n  };","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    StyledVirtualKeyboard,\r\n} from './Styled';\r\nimport {\r\n    ARROW_UP,\r\n    ARROW_DOWN,\r\n    ARROW_LEFT,\r\n    ARROW_RIGHT,\r\n} from '../../constants';\r\n\r\nconst VirtualKeyboard = ({ handleOnClick }) => (\r\n    <StyledVirtualKeyboard>\r\n        <div>\r\n            <div data-code={ARROW_UP} className=\"virtual-keyboard__button fas fa-arrow-circle-up\" onClick={handleOnClick} />\r\n        </div>\r\n        <div className=\"virtual-keyboard__wrapper-bottom\">\r\n            <div data-code={ARROW_LEFT} className=\"virtual-keyboard__button fas fa-arrow-circle-left\" onClick={handleOnClick} />\r\n            <div data-code={ARROW_DOWN} className=\"virtual-keyboard__button fas fa-arrow-circle-down\" onClick={handleOnClick} />\r\n            <div data-code={ARROW_RIGHT} className=\"virtual-keyboard__button fas fa-arrow-circle-right\" onClick={handleOnClick} />\r\n        </div>\r\n    </StyledVirtualKeyboard>\r\n);\r\n\r\nVirtualKeyboard.propTypes = {\r\n    handleOnClick: PropTypes.func,\r\n};\r\n\r\nVirtualKeyboard.propTypes = {\r\n    handleOnClick: () => { },\r\n};\r\n\r\nexport default VirtualKeyboard;","import styled, { keyframes } from 'styled-components';\r\nimport {\r\n    GAME_WIDTH,\r\n    GAME_WRAPPER_SIZE,\r\n} from './constants';\r\n\r\nconst pulse = keyframes`\r\n    0% {\r\n        -moz-box-shadow: 0 0 0 0 red;\r\n        box-shadow: 0 0 0 0 red;\r\n    }\r\n    70% {\r\n        -moz-box-shadow: 0 0 0 20px rgba(204,169,44, 0);\r\n        box-shadow: 0 0 0 20px rgba(204,169,44, 0);\r\n    }\r\n    100% {\r\n        -moz-box-shadow: 0 0 0 0 rgba(204,169,44, 0);\r\n        box-shadow: 0 0 0 0 rgba(204,169,44, 0);\r\n    }\r\n`;\r\n\r\nexport const StyledSnakeGame = styled.div`\r\n    position: relative;\r\n    margin-top: 30px;\r\n    .snake-game__map-wrapper {\r\n        width: ${GAME_WRAPPER_SIZE}px;\r\n        height: ${GAME_WRAPPER_SIZE}px;\r\n        @media only screen and (max-width: 600px) {\r\n            width: calc(100vw - 20px);\r\n            height: calc(100vw - 20px);\r\n        }\r\n        display: grid;\r\n        grid-template-columns: repeat(${GAME_WIDTH}, 1fr);\r\n        grid-template-rows: repeat(${GAME_WIDTH}, 1fr);\r\n        background: #161616;\r\n    }\r\n    .snake-game__map-block-item {\r\n        border: 1px solid black;\r\n        box-sizing: border-box;\r\n    }\r\n    .snake-game__draw-snake-body {\r\n        background: white;\r\n        transition: all 0.1s;\r\n    }\r\n    .snake-game__draw-snake-head {\r\n        background: blue;\r\n        transition: all 0.1s;\r\n    }\r\n    .snake-game__draw-snake-food {\r\n        background: red;\r\n        border-radius: 100%;\r\n        animation: ${pulse} 2s infinite;\r\n    }\r\n    .snake-game__panel {\r\n        width: ${GAME_WRAPPER_SIZE}px;\r\n        height: ${GAME_WRAPPER_SIZE}px;\r\n        @media only screen and (max-width: 600px) {\r\n            width: calc(100vw - 20px);\r\n            height: calc(100vw - 20px);\r\n        }\r\n        position: absolute;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-direction: column;\r\n    }\r\n    .snake-game__score {\r\n        color: white;\r\n        font-weight: 500;\r\n        font-size: 1.5em;\r\n        margin: 15px 0px;\r\n    }\r\n    .snake-game__start-game-btn {\r\n        width: 100px;\r\n        height: 40px;\r\n        background: black;\r\n        border: 2px solid white;\r\n        color: white;\r\n        border-radius: 20px;\r\n        font-size: 1.2em;\r\n        cursor: pointer;\r\n        outline: none;\r\n        &:hover {\r\n            color: black;\r\n            background: white;\r\n            transition: all 0.3s;\r\n        }\r\n    }\r\n    .snake-game__pause-game-btn {\r\n        color: white;\r\n        border: 1px solid white;\r\n        border-radius: 8px;\r\n        text-align: center;\r\n        line-height: 50px;\r\n        font-size: 1.5em;\r\n        letter-spacing: 5px;\r\n        cursor: pointer;\r\n        &:hover {\r\n            color: black;\r\n            background: white;\r\n            transition: all 0.3s;\r\n        }\r\n    }\r\n    .snake-game__score-info {\r\n        color: white;\r\n        font-weight: 500;\r\n        font-size: 1.5em;\r\n    }\r\n`;","import useInterval from \"@use-it/interval\";\r\nimport React, { useState } from \"react\";\r\n// import useKey from 'use-key-hook';\r\nimport VirtualKeyboard from \"./components/VirtualKeyboard\";\r\nimport { DIRECTION, DEFAULT_SNAKE, GAME_WIDTH, SNAKE_DELTA_SPEED, SNAKE_LIMITED_SPEED, SPACE } from \"./constants\";\r\nimport { StyledSnakeGame } from \"./Styled\";\r\n\r\nconst generateBlocks = (width) => {\r\n  const blocks = [];\r\n  for (let h = 0; h < width; ++h) {\r\n    const rows = [];\r\n    for (let w = 0; w < width; ++w) {\r\n      rows.push({\r\n        id: w + h * width,\r\n        x: w,\r\n        y: h\r\n      });\r\n    }\r\n    blocks.push(rows);\r\n  }\r\n\r\n  return blocks;\r\n};\r\n\r\nconst generateFood = () => {\r\n  const pos = {\r\n    x: Math.floor(Math.random() * GAME_WIDTH),\r\n    y: Math.floor(Math.random() * GAME_WIDTH),\r\n  };\r\n\r\n  return pos;\r\n}\r\n\r\nfunction SnakeGame() {\r\n\r\n  const [score, setScore] = useState(0);\r\n  const [timer, setTimer] = useState(true);\r\n  const [isGameStart, setGameStart] = useState(true);\r\n  const [snake, updateSnake] = useState(DEFAULT_SNAKE);\r\n  const [food, setFood] = useState({ x: 5, y: 0 });\r\n\r\n  window._v = snake;\r\n\r\n  const checkBound = position => {\r\n    if (position < 0) {\r\n      return GAME_WIDTH;\r\n    } else if (position > GAME_WIDTH - 1) {\r\n      return 0;\r\n    }\r\n    return position;\r\n  };\r\n\r\n  const handleOnGameStartClick = () => {\r\n    setScore(0);\r\n    setGameStart(true);\r\n    updateSnake(DEFAULT_SNAKE);\r\n    setFood(generateFood());\r\n    setTimer(true);\r\n  };\r\n\r\n  const handleKeyCode = (code) => {\r\n    if (code === SPACE) {\r\n      setTimer(!timer);\r\n      return;\r\n    }\r\n\r\n    const snake_direction = snake.direction;\r\n    const after_direection = DIRECTION[code];\r\n    if (!(snake_direction.x * -1 === after_direection.x && snake_direction.y * -1 === after_direection.y)) {\r\n      // 不是反方向\r\n      updateSnake({\r\n        ...snake,\r\n        direction: after_direection\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  const handleOnKBClick = (event) => {\r\n    const code = event.currentTarget.getAttribute('data-code');\r\n    handleKeyCode(code);\r\n  };\r\n\r\n  const updateGameView = (snake, block, food) => {\r\n    const head = snake.headPosition;\r\n    const body = snake.body;\r\n    if (head.x === block.x && head.y === block.y) {\r\n      return \"snake-game__map-block-item snake-game__draw-snake-head\";\r\n    } else if (body.length > 0) {\r\n      if (body.find((bodyPos) => bodyPos.x === block.x && bodyPos.y === block.y)) {\r\n        return \"snake-game__map-block-item snake-game__draw-snake-body\";\r\n      }\r\n    }\r\n\r\n    if (food.x === block.x && food.y === block.y) {\r\n      return 'snake-game__draw-snake-food';\r\n    }\r\n\r\n    return \"snake-game__map-block-item\";\r\n  };\r\n\r\n  const blocks = generateBlocks(GAME_WIDTH);\r\n\r\n  useInterval(() => {\r\n    // 新的移動位置\r\n    let head = {\r\n      x: checkBound(snake.headPosition.x + snake.direction.x),\r\n      y: checkBound(snake.headPosition.y + snake.direction.y)\r\n    };\r\n\r\n    let body = [...snake.body, {\r\n      x: snake.headPosition.x,\r\n      y: snake.headPosition.y\r\n    }];\r\n\r\n\r\n    // 修正身體長度\r\n    if (body.length > snake.maxLength) {\r\n      body.shift();\r\n    }\r\n\r\n    // 吃到自己\r\n    if (body.find((bodyPos) => bodyPos.x === head.x && bodyPos.y === head.y)) {\r\n      setGameStart(false);\r\n    }\r\n\r\n    let maxLength = snake.maxLength;\r\n    let speed = snake.speed;\r\n\r\n    // 吃到食物\r\n    if (food.x === head.x && food.y === head.y) {\r\n      maxLength += 1;\r\n      speed = Math.max(speed - SNAKE_DELTA_SPEED, SNAKE_LIMITED_SPEED);\r\n      setFood(generateFood())\r\n      setScore(score + 1);\r\n    }\r\n\r\n    updateSnake({\r\n      ...snake,\r\n      headPosition: head,\r\n      body,\r\n      maxLength,\r\n      speed,\r\n    });\r\n  }, (timer && isGameStart) ? snake.speed : null);\r\n\r\n  // 有問題 snake 狀態無法更新\r\n  // useKey((pressedKey, event) => {\r\n  //   handleKeyCode(pressedKey);\r\n  // }, {\r\n  //   detectKeys: [32, 37, 38, 39, 40]\r\n  // });\r\n\r\n  return (\r\n    <StyledSnakeGame>\r\n      <div className=\"snake-game__score-info\">Score: {score}</div>\r\n      {\r\n        !isGameStart &&\r\n        <div className=\"snake-game__panel\">\r\n          <div className=\"snake-game__score\">\r\n            <span>Score: </span>\r\n            <span>{score}</span>\r\n          </div>\r\n          <button\r\n            className=\"snake-game__start-game-btn\"\r\n            onClick={handleOnGameStartClick}\r\n          > Start</button>\r\n        </div>\r\n      }\r\n      <div className=\"snake-game__map-wrapper\">\r\n        {blocks.map(rows =>\r\n          rows.map(block => (\r\n            <div className={updateGameView(snake, block, food)} key={block.id} />\r\n          ))\r\n        )}\r\n      </div>\r\n      <div data-code={SPACE} onClick={handleOnKBClick} className=\"snake-game__pause-game-btn\">\r\n        {\r\n          (!timer) ? '繼續' : '暫停'\r\n        }\r\n      </div>\r\n      <VirtualKeyboard handleOnClick={handleOnKBClick} />\r\n\r\n    </StyledSnakeGame>\r\n  );\r\n}\r\n\r\nexport default SnakeGame;\r\n","import React from 'react';\nimport './App.css';\nimport SnakeGame from \"./containers/SnakeGame\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SnakeGame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}